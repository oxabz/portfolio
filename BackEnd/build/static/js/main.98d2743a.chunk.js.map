{"version":3,"sources":["Model/ContentManager.ts","Model/ContentItem.ts","Model/ContentFile.ts","Model/FolderContent.ts","Model/ContentFolder.ts","Components/Navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","ContentItem","name","parent","this","getPath","ContentFile","content","path","length","Blob","TypeError","FolderContent","item","existed","Object","values","ContentFolder","splitedPath","split","console","log","getValues","forEach","target","get","set","splice","join","setContent","child","getContent","ContentManager","Promise","resolve","reject","a","fetchContent","fetched","location","window","fetch","protocol","hostname","mode","then","response","type","headers","includes","json","_parseFolderContent","unparsed","folder","isDirectory","isFile","Navbar","props","contentManager","state","rootFolder","updaterRootMd","result","setState","buttons","rootItem","push","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98d2743a.chunk.js","sourcesContent":["import ContentFolder from \"./ContentFolder\";\nimport FolderContent from \"./FolderContent\";\nimport ContentFile from \"./ContentFile\";\n\nlet instance: ContentManager;\nexport default class ContentManager {\n\n    content: ContentFolder | null = null;\n\n    constructor() {\n        if (instance) return instance;\n\n        instance = this;\n        this.content = null;\n    }\n\n    getContent(path: string): [FolderContent | Blob | null, Promise<FolderContent | Blob>] {\n        if (!this.content) {\n            this.content = new ContentFolder(\"\", null);\n        }\n        let requestedContent = this.content.getContent(path);\n        let promisedContent = new Promise(async (resolve, reject) => {\n            let fetched = await this.fetchContent(path);\n            this.content?.setContent(path, fetched);\n            resolve(<FolderContent | Blob>this.content?.getContent(path))\n        });\n\n        return [requestedContent, <Promise<FolderContent | Blob>>promisedContent]\n    }\n\n    async fetchContent(path: string): Promise<FolderContent | Blob> {\n        let location = window.location;\n        return fetch(location.protocol + '//' + location.hostname + ':4000/content/' + path, {\n            mode: 'same-origin'\n        }).then(async (response:Response) => {\n            let type = response.headers.get('content-type') as any;\n            if (type.includes('application/json')){\n                return this._parseFolderContent(await response.json())\n            }else if (type.includes('text/markdown')){\n                return new Blob();\n            }else {\n                return new Blob();\n            }\n        });\n    }\n\n    _parseFolderContent(unparsed: any): FolderContent {\n        let folder = new FolderContent();\n        unparsed.content.forEach((item: any) =>{\n            if(item.isDirectory){\n                folder.set(item.name, new ContentFolder(item.name, null))\n            }else if(item.isFile){\n                folder.set(item.name, new ContentFile(item.name, null))\n            }\n        });\n        return folder;\n    }\n};\n","import FolderContent from \"./FolderContent\";\n\nexport default abstract class ContentItem{\n    name:string;\n    parent: ContentItem|null;\n    \n    constructor(name:string, parent:ContentItem|null) {\n        this.name = name;\n        this.parent = parent;\n    }\n\n    getPath():string{\n        if(this.parent) return this.parent.getPath() + this.name;\n        return this.name;\n    }\n\n    abstract setContent(path : string, content : Blob | object):void;\n\n    abstract getContent(path : string) : Blob | FolderContent | null;\n}","import ContentItem from \"./ContentItem\";\nimport FolderContent from \"./FolderContent\";\n\nexport default class ContentFile extends ContentItem{\n    \n    content : Blob|null;\n\n    constructor(name:string, parent:ContentItem|null){\n        super(name, parent);\n        this.content = null;\n    }\n\n    setContent(path: string, content: Blob | FolderContent): void {\n        if(path.length!==0){\n            throw \"Invalid Path\" ;\n        }\n        if(!(content instanceof Blob)){\n            throw new TypeError();\n        }\n        \n        this.content = content; \n    } \n\n    getContent(path:string): Blob | FolderContent | null {\n        if (path.length!==0)\n            throw \"Invalid Path\"\n        return this.content\n    }\n}\n","import ContentItem from \"./ContentItem\";\n\nexport default class FolderContent{\n    content:any = {};\n    \n    set(name : string, item : ContentItem | null):boolean{\n        let existed = this.content[name];\n\n        this.content[name] = item;\n\n        return existed;\n    }\n\n    get(name:string) : ContentItem | null{\n        if(!this.content[name]){\n            return null;\n        }\n        return this.content[name];\n    }\n\n    getValues():ContentItem[]{\n        return Object.values(this.content);\n    }\n}\n","import ContentItem from \"./ContentItem\";\nimport ContentFile from \"./ContentFile\";\nimport FolderContent from \"./FolderContent\";\n\nexport default class ContentFolder extends ContentItem {\n\n    content: FolderContent;\n\n    constructor(name: string, parent: ContentItem|null) {\n        super(name, parent);\n\n        this.content = new FolderContent();\n    }\n\n    setContent(path: string, content: Blob | FolderContent): void {\n        let splitedPath: string[] = path.split('/');\n        console.log(splitedPath);\n        if (path.length===0) {\n            if (!(content instanceof FolderContent))\n                throw TypeError();\n\n            this.content = content;\n            this.content.getValues().forEach((item)=>{\n                item.parent = this;\n            })\n        } else {\n            let target = this.content.get(splitedPath[0]);\n            if (!target) {\n                if (splitedPath.length === 1 && content instanceof Blob) {\n                    target = new ContentFile(splitedPath[0], this);\n                } else {\n                    target = new ContentFolder(splitedPath[0], this);\n                }\n                this.content.set(splitedPath[0], target);\n            }\n            let path = splitedPath.splice(0, 1).join('/');\n            (<ContentItem>target).setContent(path , content);\n        }\n    }\n\n    getContent(path: string): Blob | FolderContent | null {\n        let splitedPath: string[] = path.split('/');\n        if (path.length === 0) {\n            return this.content;\n        }\n        else {\n            let child = this.content.get(path);\n            if (child) {\n                return child.getContent(splitedPath.splice(0, 1).join('/'));\n            }\n            return null;\n        }\n    }\n}\n","import React,{Component} from 'react';\nimport ContentManager from '../../Model/ContentManager';\nimport FolderContent from \"../../Model/FolderContent\";\nimport ContentItem from \"../../Model/ContentItem\";\nimport ContentFile from \"../../Model/ContentFile\";\n\nexport default class Navbar extends Component{\n    \n\n    contentManager = new ContentManager();\n    state : any = {\n        rootFolder: null\n    };\n    \n    constructor(props : any){\n        super(props);\n        this.updaterRootMd()\n    }\n\n    async updaterRootMd(): Promise<void>{\n        let result = this.contentManager.getContent('');\n        result[1].then(content=>{\n            this.setState({\n                rootFolder : content\n            });\n        });\n        let content = (result[0] as FolderContent) ;\n        this.setState({\n            rootFolder : content\n        })\n    }\n\n\n    render(){\n        let buttons: any = [];\n        this.state.rootFolder?.getValues().forEach((rootItem: ContentItem) => {\n            if(rootItem instanceof ContentFile)\n                buttons.push(<button>{rootItem.name}</button>);\n        }); \n        return (\n            <nav>\n                <ul>\n                    {buttons}\n                </ul>\n            </nav>\n        );\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}